require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const path = require('path');

const { authorizeRoles } = require('./middleware/authMiddleware');
const User = require('./models/User');

const app = express();
app.use(express.json());
app.use(cors());

// MongoDB-“ì–∞ “õ–æ—Å—ã–ª—É
mongoose.connect('mongodb+srv://sabraddinbais:dCFso6WV1YZZ6ox9@oyucluster.h0vlaxe.mongodb.net/?retryWrites=true&w=majority&appName=OYUCluster');

// –°—Ç–∞—Ç–∏–∫–∞–ª—ã“õ —Ñ–∞–π–ª–¥–∞—Ä
app.use(express.static(path.join(__dirname, 'public')));

// –ë–∞—Å—Ç—ã –±–µ—Ç
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –¢—ñ—Ä–∫–µ–ª—É
app.post('/api/users/register', async (req, res) => {
    console.log("GET REGISTER request");
    try {
        const { fullName, email, phone, password } = req.body; // role ”ô–¥–µ–ø–∫—ñ –º”ô–Ω–º–µ–Ω “õ–æ—Å—ã–ª–∞–¥—ã

        console.log("Processing registration:", { fullName, email, phone }); // –î–µ–±–∞–≥ “Ø—à—ñ–Ω
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: '–ë“±–ª email “õ–æ–ª–¥–∞–Ω—ã–ª“ì–∞–Ω' });
        }

        const hashedPassword = await bcrypt.hash(password, 12);

        const user = new User({
            fullName,
            email,
            phone,
            password: hashedPassword,
            role: 'user' // ”ò–¥–µ–ø–∫—ñ —Ä”©–ª
        });
        await user.save();

        res.status(201).json({ message: '–¢—ñ—Ä–∫–µ–ª—É —Å”ô—Ç—Ç—ñ ”©—Ç—Ç—ñ', user: { fullName, email, phone } });
    } catch (error) {
        console.error("Registration error:", error); // –¢–æ–ª—ã“õ “õ–∞—Ç–µ —à—ã“ì–∞—Ä—É
        res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ', error: error.message });
    }
});

// –ö—ñ—Ä—É
app.post('/api/users/login', async (req, res) => {
    try {
        const { email, password } = req.body;

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: '–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: '“ö–∞—Ç–µ “õ“±–ø–∏—è —Å”©–∑' });
        }

        const token = jwt.sign(
            { userId: user._id, role: user.role }, // ‚úÖ role —Ç–æ–∫–µ–Ω–≥–µ “õ–æ—Å—ã–ª–¥—ã
            process.env.JWT_SECRET || 'your-secret-key',
            { expiresIn: '1h' }
        );

        res.json({
            token,
            user: {
                _id: user._id,
                name: user.name,
                email: user.email,
                phone: user.phone,
                address: user.address,
                role: user.role
            }
        });
    } catch (error) {
        res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ' });
    }
});

// üî• –†”©–ª–º–µ–Ω “õ–æ—Ä“ì–∞–ª“ì–∞–Ω –±–µ—Ç “Ø–ª–≥—ñ—Å—ñ
app.get('/api/admin/dashboard', authorizeRoles('admin'), (req, res) => {
    res.json({ message: '–¢–µ–∫ –∞–¥–º–∏–Ω –∫”©—Ä–µ –∞–ª–∞—Ç—ã–Ω –¥–µ—Ä–µ–∫' });
});

// –°–µ—Ä–≤–µ—Ä —ñ—Å–∫–µ “õ–æ—Å—É
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä ${PORT} –ø–æ—Ä—Ç—ã–Ω–¥–∞ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã`);
});
